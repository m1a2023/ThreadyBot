from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from typing import Any

from Handlers.Handler import Handler
from Handlers.HandlersForMainMenu.HandlersForEventsAndStatusOfProject.HandlersForCurrentTask.CreateKeyboardForCurrentTasks import CreateKeyboardForCurrentTasks
from Handlers.RequestsHandler import getTaskById, getUserNameById

class ShowInfoAndFastEditTasksHandler(Handler): 
  @staticmethod
  async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    query = update.callback_query
    await query.answer()
    task_id = context.user_data["taskInCurrentTasks"]
    task = await getTaskById(task_id)
    if task.developer is not None:
      developer_link = f'<a href="tg://user?id={task.developer}">{await getUserNameById(task.developer)}</a>'
    text_about_task = (f"–ó–∞–¥–∞—á–∞: {task.title}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {datetime.fromisoformat(task.deadline).strftime('%d.%m.%Y')}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
                f"–°—Ç–∞—Ç—É—Å: {task.status}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: { developer_link if task.developer else '–ù–µ —É–∫–∞–∑–∞–Ω'}")

    keyboard = []
    if task.status == "in_progress":
      keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="FastEditTaskForStatusDone")])
    else:
      keyboard.append([InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="FastEditTaskForStatusInProgress")])
    if task.developer is None:
      keyboard.append([InlineKeyboardButton("üßë‚Äçüíª –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="FastEditTaskForChangeDeveloper")])
    
    keyboard.append([InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="FastEditTaskForChangeDeadline")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="EventsAndStatusOfProjects")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text_about_task, reply_markup=reply_markup, parse_mode="HTML")