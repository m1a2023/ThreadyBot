from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from typing import Any

from Handlers.Handler import Handler
from Handlers.HandlersForMainMenu.HandlersForEventsAndStatusOfProject.HandlersForCurrentTask.CreateKeyboardForCurrentTasks import CreateKeyboardForCurrentTasks
from Handlers.RequestsHandler import getTaskById, getUserNameById, isAdmin

class ShowInfoAndFastEditTasksHandler(Handler): 
  @staticmethod
  async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = context.user_data["taskInCurrentTasks"]
    task = await getTaskById(task_id)
    user_id = update.effective_user.id
    project_id = context.user_data["chosenProject"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö –æ–¥–∏–Ω —Ä–∞–∑
    admin_check = await isAdmin(user_id, project_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –∑–∞–¥–∞—á–µ
    developer_link = ''
    if task.developer is not None:
      developer_link = f'<a href="tg://user?id={task.developer}">{await getUserNameById(task.developer)}</a>'
    
    text_about_task = (
      f"–ó–∞–¥–∞—á–∞: {task.title}\n"
      f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
      f"–î–µ–¥–ª–∞–π–Ω: {datetime.fromisoformat(task.deadline).strftime('%d.%m.%Y')}\n"
      f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
      f"–°—Ç–∞—Ç—É—Å: {task.status}\n"
      f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {developer_link if task.developer else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )

    keyboard = []
    
    if task.developer is None:
      if admin_check:
        keyboard.append([InlineKeyboardButton("üßë‚Äçüíª –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="FastEditTaskForChangeDeveloper")])
      else:
        keyboard.append([InlineKeyboardButton("üßë‚Äçüíª –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data="FastEditTaskSetYourselfDeveloper")])
    
    # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
    is_developer = task.developer == user_id
    can_edit = is_developer or (task.developer is None) or admin_check
    
    if is_developer or admin_check:
      keyboard.append([InlineKeyboardButton("ü§ñ –ü–æ–º–æ—â—å –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", callback_data="generateSubtask")])

    if can_edit:
      if task.status == "in_progress":
        keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="FastEditTaskForStatusDone")])
      else:
        keyboard.append([InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="FastEditTaskForStatusInProgress")])
      
      keyboard.append([InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="FastEditTaskForChangeDeadline")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
      callback_data="EventsAndStatusOfProjects")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text_about_task, reply_markup=reply_markup, parse_mode="HTML")