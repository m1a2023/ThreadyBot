from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from Handlers.Handler import Handler
from Handlers.RequestsHandler import getAllProjectsByDevId, getAllProjectsByOwnerId
from ProjectManagment.ProjectManager import ProjectManager


class ChooseProjectForAllHandler(Handler):
    @staticmethod
    async def handle(update, context):
      query = update.callback_query
      await query.answer()

      user_id = update.effective_user.id
      managed_projects = await getAllProjectsByOwnerId(user_id)
      dev_projects = await getAllProjectsByDevId(user_id)

      # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
      managed_names = await ProjectManager.get_projects_names_and_id_from_list(managed_projects) if managed_projects else []
      dev_names = await ProjectManager.get_projects_names_and_id_from_list(dev_projects) if dev_projects else []

      # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤–æ–æ–±—â–µ
      if not managed_names and not dev_names:
          keyboard = [
              [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="CreateProject")],
              [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="EventsAndStatusOfProjects")]
          ]
          reply_markup = InlineKeyboardMarkup(keyboard)
          await query.edit_message_text(text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤", reply_markup=reply_markup)
          context.user_data["state"] = None
          return

      keyboard = []
      max_rows = max(len(managed_names), len(dev_names))

      # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç –≤ –∫–æ–ª–æ–Ω–∫–µ
      headers = []
      if managed_names:
          headers.append(InlineKeyboardButton("–£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="no_action"))
      if dev_names:
          headers.append(InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="no_action"))
      if headers:
          keyboard.append(headers)

      # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
      for i in range(max_rows):
          row = []
          if i < len(managed_names):
              row.append(InlineKeyboardButton(managed_names[i][0], callback_data=f"chosenFromAllProjects_{managed_names[i][1]}"))
          elif managed_names:  # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
              row.append(InlineKeyboardButton(" ", callback_data="no_action"))

          if i < len(dev_names):
              row.append(InlineKeyboardButton(dev_names[i][0], callback_data=f"chosenFromAllProjects_{dev_names[i][1]}"))
          elif dev_names:  # –ï—Å–ª–∏ –µ—Å—Ç—å dev-–ø—Ä–æ–µ–∫—Ç—ã, –Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
              row.append(InlineKeyboardButton(" ", callback_data="no_action"))

          if row:
              keyboard.append(row)

      # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
      keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="EventsAndStatusOfProjects")])

      reply_markup = InlineKeyboardMarkup(keyboard)
      await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", reply_markup=reply_markup)
      context.user_data["state"] = None